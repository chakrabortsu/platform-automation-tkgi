# The following line helps maintain current documentation at http://docs.pivotal.io.
# code_snippet reference-pipeline start yaml

# Groups start yaml
groups:
- jobs:
    - install-opsman
    - delete-installation
    - test-platform-automation
    - export-installation
    - upgrade-opsman
    - download-upload-and-stage-healthwatch-pks-exporter
    - download-upload-and-stage-healthwatch
    - download-upload-and-stage-pks
    - configure-healthwatch-pks-exporter
    - configure-healthwatch
    - configure-pks
    - apply-product-changes
  name: install-setup-pipeline
# Groups end yaml

# code_snippet reference-resources-s3 start yaml
#resource_types:
#- name: s3-with-arn
#  type: docker-image
#  source:
#    repository: concourse/s3-resource
#    tag: 1.2.1-ubuntu

resources:
- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: http://10.220.54.169:9000
    bucket: ((s3_pivnet_products_bucket))
    regexp: .*tasks-(.*).zip
    disable_ssl: true

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: http://10.220.54.169:9000
    bucket: ((s3_pivnet_products_bucket))
    regexp: .*image-(.*).tgz
    disable_ssl: true

# code_snippet export-installation-resource-usage start yaml
- name: installation
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: http://10.220.54.169:9000
    bucket: ((s3_pivnet_products_bucket))
    regexp: ((foundation))-installation-(.*).zip
    disable_ssl: true
# code_snippet export-installation-resource-usage end

# code_snippet resources-configurations start yaml
# VM state and foundation configuration
- name: state
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    endpoint: http://10.220.54.169:9000
    versioned_file: state-((foundation)).yml
    initial_content_text: '{}'
    initial_version: 'empty-start'
    disable_ssl: true

# configurations
- name: configuration
  type: git
  source:
    private_key: ((plat-auto-pipes-deploy-key.private_key))
    uri: ((pipeline-repo))
    branch: main
    submodules: all
# code_snippet resources-configurations end yaml

# code_snippet resources-triggers start yaml
# triggers used to have jobs do something in a timely manner
- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: daily-trigger
  type: time
  source:
    interval: 24h
# code_snippet resources-triggers end yaml

# code_snippet prepare-tasks-with-secrets-usage start yaml
# This task is used in multiple jobs
# The yaml anchor "*prepare-tasks-with-secrets" is used in its place
prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/foundations/config config/foundations/((foundation))/config
    VARS_PATHS: vars/foundations/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks
# code_snippet prepare-tasks-with-secrets-usage end yaml
# code_snippet prepare-image-usage start yaml
prepare-image: &prepare-image
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-image.yml
#  params:
#    CA_CERTS: ((opsman-ssl.ca))
# code_snippet prepare-image-usage end yaml
# code_snippet reference-jobs start yaml
jobs:
- name: test-platform-automation
  serial: true
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    # code_snippet test-interpolate-usage start yaml
    - task: test-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/test-interpolate.yml
      params:
        CONFIG_FILE: foundations/((foundation))/config/download-pks.yml
        SKIP_MISSING: true
      input_mapping:
        config: configuration
    # code_snippet test-interpolate-usage end
    # code_snippet test-usage start yaml
    - task: test
      file: platform-automation-tasks/tasks/test.yml
      image: platform-automation-image
  # code_snippet test-usage end

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: one-time-trigger
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: state
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-opsman.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: s3
    output_mapping:
      downloaded-product: opsman-image
  # code_snippet create-vm-usage start yaml
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      config: configuration
      vars: configuration
    params:
      OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
      STATE_FILE: state-((foundation)).yml
      VARS_FILES: vars/foundations/((foundation))/vars/director.yml
    ensure: &put-state
      do:
      - put: state
        params:
          file: generated-state/state-((foundation)).yml
  # code_snippet create-vm-usage end
  # code_snippet configure-authentication-usage start yaml
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: configuration
      config: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      AUTH_CONFIG_FILE: foundations/config/auth.yml
  # code_snippet configure-authentication-usage end
  # code_snippet configure-opsman-usage start yaml
  - task: configure-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-opsman.yml
    input_mapping:
      env: configuration
      config: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
      VARS_FILES: vars/foundations/((foundation))/vars/director.yml
  # code_snippet configure-opsman-usage end
  # code_snippet configure-director-usage start yaml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      DIRECTOR_CONFIG_FILE: foundations/((foundation))/config/director.yml
      VARS_FILES: |
        vars/foundations/((foundation))/vars/director.yml
        vars/foundations/((foundation))/vars/pks.yml 
  # code_snippet configure-director-usage end
  # code_snippet apply-director-changes-usage start yaml
  - task: apply-director-changes
    image: platform-automation-image
    attempts: 3
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet apply-director-changes-usage end
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration
    params:
      INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
      ENV_FILE: foundations/config/env.yml
  - put: installation
    params:
      file: installation/((foundation))-installation*.zip

- name: export-installation
  serial_groups: [ install ]
  serial: true
  plan:
  - in_parallel:
    - get: state
      passed: [ install-opsman ]
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  # code_snippet revert-staged-changes-usage start yaml
  - task: revert-staged-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/revert-staged-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet revert-staged-changes-usage end
  # code_snippet export-installation-usage start yaml
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
  # code_snippet export-installation-usage end
  - put: installation
    params:
      file: installation/((foundation))-installation*.zip

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: installation
      passed: [ export-installation ]
    - get: configuration
    - get: state
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-opsman.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: s3
    output_mapping:
      downloaded-product: opsman-image
  # code_snippet upgrade-opsman-usage start yaml
  - task: upgrade-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image
      config: configuration
      env: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
      STATE_FILE: state-((foundation)).yml
      INSTALLATION_FILE: ((foundation))-installation*.zip
      VARS_FILES: vars/foundations/((foundation))/vars/director.yml
    ensure: *put-state
  # code_snippet upgrade-opsman-usage end
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      DIRECTOR_CONFIG_FILE: foundations/((foundation))/config/director.yml
      VARS_FILES: |
        vars/foundations/((foundation))/vars/director.yml
        vars/foundations/((foundation))/vars/pks.yml 
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    attempts: 3
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
  - put: installation
    params:
      file: installation/((foundation))-installation*.zip

- name: download-upload-and-stage-pks
  serial: true
  serial_groups: [ products ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      trigger: true
      passed: [ "upgrade-opsman" ]
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  # code_snippet download-product-usage-s3 start yaml
  - task: download-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-pks.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: s3
    output_mapping:
      downloaded-product: pks-product
      downloaded-stemcell: pks-stemcell
  # code_snippet download-product-usage-s3 end
  # code_snippet upload-and-stage-product-usage start yaml
  - task: upload-and-stage-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: pks-product
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet upload-and-stage-product-usage end
  # code_snippet upload-stemcell-usage start yaml
  - task: upload-pks-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration
      stemcell: pks-stemcell
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet upload-stemcell-usage end

- name: download-upload-and-stage-healthwatch
  serial: true
  serial_groups: [ products ]
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
          trigger: true
          passed: [ "upgrade-opsman" ]
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/download-healthwatch.yml
        VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
        SOURCE: s3
      output_mapping:
        downloaded-product: healthwatch-product
        downloaded-stemcell: healthwatch-stemcell
    - task: upload-and-stage-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: healthwatch-product
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    - task: upload-healthwatch-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: configuration
        stemcell: healthwatch-stemcell
      params:
        ENV_FILE: foundations/config/env.yml


- name: download-upload-and-stage-healthwatch-pks-exporter
  serial: true
  serial_groups: [ products ]
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
          trigger: true
          passed: [ "upgrade-opsman" ]
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/download-healthwatch-pks-exporter.yml
        VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
        SOURCE: s3
      output_mapping:
        downloaded-product: healthwatch-pks-exporter
    - task: upload-and-stage-healthwatch-pks-exporter
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: healthwatch-pks-exporter
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml

- name: configure-pks
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      passed:
      - download-upload-and-stage-pks
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  # code_snippet configure-product-usage start yaml
  - task: configure-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/pks.yml
      ENV_FILE: foundations/config/env.yml
      VARS_FILES: |
        vars/foundations/((foundation))/vars/director.yml
        vars/foundations/((foundation))/vars/pks.yml
  # code_snippet configure-product-usage end

- name: configure-healthwatch
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - download-upload-and-stage-healthwatch
        trigger: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/healthwatch.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/director.yml


- name: configure-healthwatch-pks-exporter
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - download-upload-and-stage-healthwatch-pks-exporter
        trigger: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/healthwatch-pks-exporter.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/director.yml

- name: apply-product-changes
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      passed:
      - configure-pks
      - configure-healthwatch
      - configure-healthwatch-pks-exporter
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  # code_snippet pre-deploy-check-usage start yaml
  - task: pre-deploy-check
    image: platform-automation-image
    file: platform-automation-tasks/tasks/pre-deploy-check.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet pre-deploy-check-usage end
  # code_snippet apply-changes-usage start yaml
  - task: apply-product-changes
    attempts: 3
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet apply-changes-usage end
  # code_snippet check-pending-changes-usage start yaml
  - task: check-pending-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/check-pending-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      ALLOW_PENDING_CHANGES: true
  # code_snippet check-pending-changes-usage end
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
  - put: installation
    params:
      file: installation/((foundation))-installation*.zip
- name: delete-installation
  serial: true
  serial_groups: [install]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
      - get: state
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    # code_snippet delete-installation-usage start yaml
    - task: delete-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
      # code_snippet delete-installation-usage end yaml
    # code_snippet delete-vm-usage start yaml
    - task: delete-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-vm.yml
      input_mapping:
        config: configuration
      params:
        OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
        STATE_FILE: state-((foundation)).yml
      ensure:
        do:
        - put: state
          params:
            file: generated-state/state-((foundation)).yml
    # code_snippet delete-vm-usage end


# code_snippet reference-jobs end yaml
# code_snippet reference-pipeline end
# The previous line helps maintain current documentation at http://docs.pivotal.io.
